{"version":3,"file":"static/js/965.66ed86ea.chunk.js","mappings":"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","sources":["features/Auth/Components/AuthFormContainer.tsx","features/Auth/Schemas/ForgetPasswordFormSchema.ts","features/Auth/ForgetPassword/Components/ForgetPasswordFormFooter.tsx","features/Auth/ForgetPassword/ForgetPassword.tsx","features/Auth/Schemas/LoginFormSchema.ts","features/Auth/Login/Components/LoginFormFooter.tsx","features/Auth/Login/Login.tsx","features/Auth/Schemas/RegisterFormSchema.ts","features/Auth/Register/Components/RegisterFormFooter.tsx","features/Auth/Register/Register.tsx","features/Auth/Schemas/ResetPassowordFormSchema.ts","features/Auth/ResetPassword/Components/ResetPasswordFormFooter.tsx","features/Auth/ResetPassword/ResetPassword.tsx","features/Auth/Routes/AuthRoutes.tsx"],"sourcesContent":["import { memo } from \"react\";\n\ninterface AuthFormContainerProps {\n  title: string;\n  subtitle: string;\n  children: React.ReactNode;\n  footer: React.ReactNode;\n}\n\nconst AuthFormContainer = ({ title, subtitle, children, footer }: AuthFormContainerProps) => {\n  return (\n    <div className=\"mb-6 flex sm:pb-10 sm:pt-16\">\n      <div className=\"w-full max-w-screen-sm rounded-2xl border-gray-100 bg-white px-3 py-6 xs:px-4 sm:m-auto sm:border-2 sm:px-20 sm:py-12 sm:shadow-md\">\n        <div className=\"mb-14 mt-4 md:text-center\">\n          <div className=\"text-xl font-bold sm:text-3xl\">{title}</div>\n          <div className=\"mt-1 text-sm font-semibold text-gray-400 sm:mt-3 sm:text-base\">{subtitle}</div>\n        </div>\n        {children}\n        <div className=\"text-center sm:mt-4\">\n          <div className=\"mb-2 mt-8 text-center sm:mt-14\">{footer}</div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(AuthFormContainer);\n","import { TFunction } from \"i18next\";\nimport { object, string } from \"yup\";\n\nconst forgetPasswordFormSchema = (t: TFunction) =>\n  object().shape({\n    email: string()\n      .email(t(\"emailInvalid\") ?? \"\")\n      .required(t(\"emailRequired\") ?? \"\"),\n  });\n\nexport { forgetPasswordFormSchema };\n","import { memo } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { FiChevronLeft } from \"react-icons/fi\";\nimport { Link } from \"react-router-dom\";\n\nimport { AUTH_PATH } from \"@constants/routeConstant\";\n\nconst ForgetPasswordFormFooter = () => {\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"text-left\">\n      <Link\n        to={AUTH_PATH.LOGIN}\n        className=\"flex items-center justify-start font-semibold text-gray-500 hover:text-primary-700 hover:underline sm:inline-block\"\n      >\n        <FiChevronLeft className=\"mb-1 mr-2 inline-block\" />\n        <span>{t(\"login\")}</span>\n      </Link>\n    </div>\n  );\n};\n\nexport default memo(ForgetPasswordFormFooter);\n","import { yupResolver } from \"@hookform/resolvers/yup\";\nimport { AxiosError } from \"axios\";\nimport { memo, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport { Alert } from \"@components/Alert\";\nimport { Button } from \"@components/Button\";\nimport { Input } from \"@components/Form\";\nimport { AUTH_CODE } from \"@constants/codeConstant\";\nimport { AUTH_PATH } from \"@constants/routeConstant\";\nimport useDocumentTitle from \"@hooks/useDocumentTitle\";\nimport { AuthFormGeneralError } from \"@interfaces/Common\";\nimport { authService } from \"@services/index\";\n\nimport AuthFormContainer from \"../Components/AuthFormContainer\";\nimport { forgetPasswordFormSchema } from \"../Schemas/ForgetPasswordFormSchema\";\nimport ForgetPasswordFormFooter from \"./Components/ForgetPasswordFormFooter\";\n\nconst ForgetPassword = () => {\n  const { t } = useTranslation();\n\n  const navigate = useNavigate();\n\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [generalError, setGeneralError] = useState<AuthFormGeneralError | null>(null);\n\n  const { control, handleSubmit: useFormSubmit } = useForm({\n    resolver: yupResolver(forgetPasswordFormSchema(t)),\n  });\n\n  const handleSubmit = useFormSubmit(async (formData) => {\n    setIsSubmitting(true);\n\n    try {\n      await authService.forgetPassword(formData.email);\n      setGeneralError(null);\n      navigate(`${AUTH_PATH.RESET_PASSWORD}?email=${formData.email}`);\n    } catch (error) {\n      if (error instanceof AxiosError) {\n        setGeneralError({\n          code: AUTH_CODE.ACCOUNT_NOT_EXISTS,\n          message: t(\"emailNotExists\", { email: formData.email }),\n        });\n      }\n    } finally {\n      setIsSubmitting(false);\n    }\n  });\n\n  useDocumentTitle(t(\"forgetPassword\"));\n\n  return (\n    <AuthFormContainer\n      title={t(\"forgetYourPassword\")}\n      subtitle={t(\"forgetPasswordSubtitle\")}\n      footer={<ForgetPasswordFormFooter />}\n    >\n      <form className=\"grid grid-cols-1 gap-6\" onSubmit={handleSubmit}>\n        {generalError && (\n          <Alert\n            title={t(\"forgetPasswordError\")}\n            message={generalError.message}\n            type=\"danger\"\n            className=\"mb-2\"\n          />\n        )}\n        <Input\n          type=\"text\"\n          label={t(\"email\")}\n          name=\"email\"\n          className=\"block\"\n          disabled={isSubmitting}\n          control={control}\n        />\n        <Button type=\"submit\" disabled={isSubmitting} isLoading={isSubmitting}>\n          {t(\"forgetPassword\")}\n        </Button>\n      </form>\n    </AuthFormContainer>\n  );\n};\n\nexport default memo(ForgetPassword);\n","import { TFunction } from \"i18next\";\nimport { object, string } from \"yup\";\n\nconst loginFormSchema = (t: TFunction) =>\n  object().shape({\n    email: string()\n      .email(t(\"emailInvalid\") ?? \"\")\n      .required(t(\"emailRequired\") ?? \"\"),\n    password: string().required(t(\"passwordRequired\") ?? \"\"),\n  });\n\nexport { loginFormSchema };\n","import { memo } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useSearchParams } from \"react-router-dom\";\n\nimport { AUTH_PATH } from \"@constants/routeConstant\";\n\nconst LoginFormFooter = () => {\n  const { t } = useTranslation();\n\n  const [searchParams] = useSearchParams();\n\n  return (\n    <>\n      {t(\"doNotHaveAccount\")}\n      <Link\n        to={`${AUTH_PATH.REGISTER}?redirect=${encodeURIComponent(searchParams.get(\"redirect\") ?? \"\")}`}\n        className=\"ml-1 block font-semibold underline hover:text-primary-700 sm:inline-block\"\n      >\n        {t(\"createNow\")}\n      </Link>\n    </>\n  );\n};\n\nexport default memo(LoginFormFooter);\n","import { yupResolver } from \"@hookform/resolvers/yup\";\nimport { memo, useState } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate, useSearchParams } from \"react-router-dom\";\nimport { isEmpty } from \"lodash\";\n\nimport { Alert } from \"@components/Alert\";\nimport { Button } from \"@components/Button\";\nimport { Input } from \"@components/Form\";\nimport { AUTH_CODE } from \"@constants/codeConstant\";\nimport { AUTH_PATH } from \"@constants/routeConstant\";\nimport useDocumentTitle from \"@hooks/useDocumentTitle\";\nimport { AuthFormGeneralError, AuthLoginFormDataType } from \"@interfaces/Common\";\nimport { authService } from \"@services/index\";\nimport { setAuthToken } from \"@services/Common/authService\";\nimport useSelector from \"@hooks/useSelector\";\nimport { commonSelector } from \"@selectors/index\";\n\nimport AuthFormContainer from \"../Components/AuthFormContainer\";\nimport { loginFormSchema } from \"../Schemas/LoginFormSchema\";\nimport LoginFormFooter from \"./Components/LoginFormFooter\";\n\nconst Login = () => {\n  const { t } = useTranslation();\n\n  const appNameConfigValue = useSelector(commonSelector.appNameConfigSelector);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [generalError, setGeneralError] = useState<AuthFormGeneralError | null>(null);\n  const [searchParams] = useSearchParams();\n  const navigate = useNavigate();\n\n  const {\n    control,\n    handleSubmit: useFormSubmit,\n    watch,\n    ...methods\n  } = useForm<AuthLoginFormDataType>({\n    resolver: yupResolver(loginFormSchema(t)),\n  });\n\n  const email = watch(\"email\");\n\n  const handleSubmit = useFormSubmit(async (formData) => {\n    setIsSubmitting(true);\n    try {\n      const userData = await authService.loginWithEmailAndPassword(formData);\n      setAuthToken({ token: userData.token });\n      navigate(\"/\");\n    } catch (error) {\n      if (!isEmpty(error)) {\n        setGeneralError(error as AuthFormGeneralError);\n      }\n    } finally {\n      setIsSubmitting(false);\n    }\n  });\n\n  useDocumentTitle(t(\"login\"));\n\n  return (\n    <AuthFormContainer\n      title={t(\"loginTitle\")}\n      subtitle={t(\"loginSubtitle\", { appName: appNameConfigValue })}\n      footer={<LoginFormFooter />}\n    >\n      <FormProvider control={control} handleSubmit={useFormSubmit} watch={watch} {...methods}>\n        <form onSubmit={handleSubmit} className=\"grid grid-cols-1 gap-6\">\n          {generalError && (\n            <Alert title={t(\"loginError\")} message={generalError.message} type=\"danger\" className=\"mb-2\">\n              {generalError.code === AUTH_CODE.ACCOUNT_NOT_EXISTS && (\n                <Link\n                  to={`${AUTH_PATH.REGISTER}?email=${encodeURIComponent(\n                    email || \"\",\n                  )}&redirect=${encodeURIComponent(searchParams.get(\"redirect\") ?? \"\")}`}\n                >\n                  {t(\"createWithEmail\")}\n                </Link>\n              )}\n            </Alert>\n          )}\n          <Input\n            name=\"email\"\n            label={t(\"email\")}\n            className=\"block\"\n            control={control}\n            disabled={isSubmitting}\n          />\n          <Input\n            type=\"password\"\n            label={t(\"password\")}\n            name=\"password\"\n            className=\"block\"\n            control={control}\n            disabled={isSubmitting}\n          />\n          <div className=\"-mb-1.5 -mt-2 flex justify-end\">\n            <Link\n              to={AUTH_PATH.FORGET_PASSWORD}\n              className=\"text-center text-sm font-semibold text-gray-400 hover:underline\"\n              role=\"link\"\n              tabIndex={-1}\n            >\n              {t(\"forgetYourPassword\")}\n            </Link>\n          </div>\n          <Button type=\"submit\" disabled={isSubmitting} isLoading={isSubmitting}>\n            {t(\"login\")}\n          </Button>\n        </form>\n      </FormProvider>\n    </AuthFormContainer>\n  );\n};\n\nexport default memo(Login);\n","import { TFunction } from \"i18next\";\nimport { string } from \"yup\";\n\nimport { AuthRegisterFormDataType } from \"@interfaces/Common\";\nimport { generateFormSchema } from \"@utils/Helpers/commonHelper\";\n\nconst registerFormSchema = (t: TFunction) =>\n  generateFormSchema<AuthRegisterFormDataType>({\n    name: string().required(t(\"nameRequired\") ?? \"\"),\n    username: string().required(t(\"usernameRequired\") ?? \"\"),\n    email: string()\n      .email(t(\"emailInvalid\") ?? \"\")\n      .required(t(\"emailRequired\") ?? \"\"),\n    password: string().required(t(\"passwordRequired\") ?? \"\"),\n  });\n\nexport { registerFormSchema };\n","import { memo } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useSearchParams } from \"react-router-dom\";\n\nimport { AUTH_PATH } from \"@constants/routeConstant\";\n\nconst RegisterFormFooter = () => {\n  const { t } = useTranslation();\n\n  const [searchParams] = useSearchParams();\n\n  return (\n    <>\n      {t(\"alreadyHaveAccount\")}\n      <Link\n        to={`${AUTH_PATH.LOGIN}?redirect=${encodeURIComponent(searchParams.get(\"redirect\") ?? \"\")}`}\n        className=\"ml-1 block font-semibold underline hover:text-primary-700 sm:inline-block\"\n      >\n        {t(\"loginNow\")}\n      </Link>\n    </>\n  );\n};\n\nexport default memo(RegisterFormFooter);\n","import { UNPROCESSABLE_ENTITY } from \"http-status\";\nimport { memo, useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { Link, useNavigate, useSearchParams } from \"react-router-dom\";\n\nimport { Alert } from \"@components/Alert\";\nimport { Button } from \"@components/Button\";\nimport { Checkbox, Input } from \"@components/Form\";\nimport { AUTH_CODE } from \"@constants/codeConstant\";\nimport { AUTH_PATH } from \"@constants/routeConstant\";\nimport useDocumentTitle from \"@hooks/useDocumentTitle\";\nimport { AuthFormGeneralError, AuthRegisterFormDataType } from \"@interfaces/Common\";\nimport { authService } from \"@services/index\";\nimport { setAuthToken } from \"@services/Common/authService\";\n\nimport { registerFormSchema } from \"@auth/Schemas/RegisterFormSchema\";\n\nimport AuthFormContainer from \"../Components/AuthFormContainer\";\nimport RegisterFormFooter from \"./Components/RegisterFormFooter\";\n\nconst Register = () => {\n  const { t } = useTranslation();\n\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [generalError, setGeneralError] = useState<AuthFormGeneralError | null>(null);\n  const [searchParams] = useSearchParams();\n  const navigate = useNavigate();\n\n  const {\n    control,\n    handleSubmit: useFormSubmit,\n    setValue,\n    watch,\n  } = useForm<AuthRegisterFormDataType>({\n    resolver: registerFormSchema(t),\n  });\n\n  const email = watch(\"email\", \"\");\n\n  const handleSubmit = useFormSubmit(async (formData) => {\n    setIsSubmitting(true);\n\n    await authService\n      .register(formData)\n      .then((userData) => {\n        setAuthToken({ token: userData?.token });\n        navigate(\"/\");\n      })\n      .catch((err) => {\n        const { status } = err.response.data;\n\n        if (status === UNPROCESSABLE_ENTITY) {\n          setGeneralError({\n            code: AUTH_CODE.ACCOUNT_EXISTS,\n            message: t(\"emailAlreadyExists\", { email: formData.email }),\n          });\n          return;\n        }\n        setGeneralError({ ...err });\n      })\n      .finally(() => {\n        setIsSubmitting(false);\n      });\n  });\n\n  useDocumentTitle(t(\"register\"));\n\n  useEffect(() => {\n    const emailParams = searchParams.get(\"email\");\n    if (!emailParams) {\n      return;\n    }\n\n    setValue(\"email\", emailParams);\n  }, [searchParams, setValue]);\n\n  return (\n    <AuthFormContainer\n      title={t(\"registerTitle\")}\n      subtitle={t(\"registerSubtitle\")}\n      footer={<RegisterFormFooter />}\n    >\n      <form className=\"grid grid-cols-1 gap-6\" onSubmit={handleSubmit}>\n        {generalError && (\n          <Alert title={t(\"registerError\")} message={generalError.message} type=\"danger\" className=\"mb-2\">\n            {generalError.code === AUTH_CODE.ACCOUNT_EXISTS && (\n              <Link\n                to={`${AUTH_PATH.LOGIN}?email=${encodeURIComponent(\n                  email ?? \"\",\n                )}&redirect=${encodeURIComponent(searchParams.get(\"redirect\") ?? \"\")}`}\n              >\n                {t(\"loginNow\")}\n              </Link>\n            )}\n          </Alert>\n        )}\n\n        <Input\n          type=\"text\"\n          label={t(\"name\")}\n          name=\"name\"\n          className=\"block\"\n          disabled={isSubmitting}\n          control={control}\n        />\n        <Input\n          type=\"text\"\n          label={t(\"username\")}\n          name=\"username\"\n          className=\"block\"\n          disabled={isSubmitting}\n          control={control}\n        />\n        <Input\n          type=\"text\"\n          label={t(\"email\")}\n          name=\"email\"\n          disabled={isSubmitting}\n          className=\"block\"\n          control={control}\n        />\n        <Input\n          type=\"password\"\n          label={t(\"password\")}\n          name=\"password\"\n          className=\"block\"\n          disabled={isSubmitting}\n          control={control}\n        />\n        {/* eslint-disable-next-line jsx-a11y/label-has-associated-control */}\n        <label htmlFor=\"isAcceptedTerms\" className=\"group hidden items-center justify-start space-x-4\">\n          <Checkbox\n            name=\"isAcceptedTerms\"\n            className=\"flex-shrink-0\"\n            disabled={isSubmitting}\n            control={control}\n          />\n          <div className=\"text-sm font-semibold leading-6 text-gray-400\">\n            <Trans i18nKey=\"isAcceptedTerm\" t={t}>\n              0\n              <Link to=\"/\" className=\"ml-1 underline hover:text-black\">\n                1\n              </Link>\n            </Trans>\n          </div>\n        </label>\n        <Button type=\"submit\" disabled={isSubmitting} isLoading={isSubmitting}>\n          {t(\"register\")}\n        </Button>\n      </form>\n    </AuthFormContainer>\n  );\n};\n\nexport default memo(Register);\n","import { TFunction } from \"i18next\";\nimport { object, ref, string } from \"yup\";\n\nconst resetPasswordFormSchema = (t: TFunction) =>\n  object().shape({\n    password: string().required(t(\"passwordRequired\") ?? \"\"),\n    password_confirmation: string()\n      .required(t(\"passwordConfirmationRequired\") ?? \"\")\n      .oneOf([ref(\"password\")], t(\"passwordConfirmationNotMatch\") ?? \"\"),\n    otp: string().required(t(\"otpRequired\") ?? \"\"),\n  });\n\nexport { resetPasswordFormSchema };\n","import { memo } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { FiChevronLeft } from \"react-icons/fi\";\nimport { Link } from \"react-router-dom\";\n\nimport { AUTH_PATH } from \"@constants/routeConstant\";\n\nconst ResetPasswordFormFooter = () => {\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"text-left\">\n      <Link\n        to={AUTH_PATH.LOGIN}\n        className=\"flex items-center justify-start font-semibold text-gray-500 hover:text-primary-700 hover:underline sm:inline-block\"\n      >\n        <FiChevronLeft className=\"mb-1 mr-2 inline-block\" />\n        <span>{t(\"login\")}</span>\n      </Link>\n    </div>\n  );\n};\n\nexport default memo(ResetPasswordFormFooter);\n","import { yupResolver } from \"@hookform/resolvers/yup\";\nimport { AxiosError } from \"axios\";\nimport { memo, useMemo, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\n\nimport { Alert } from \"@components/Alert\";\nimport { Button } from \"@components/Button\";\nimport { Input } from \"@components/Form\";\nimport InputOTP from \"@components/Form/Input/InputOTP/InputOTP\";\nimport { AUTH_CODE } from \"@constants/codeConstant\";\nimport { AUTH_PATH } from \"@constants/routeConstant\";\nimport useDocumentTitle from \"@hooks/useDocumentTitle\";\nimport useToast from \"@hooks/useToast\";\nimport { AuthFormGeneralError, AuthResetPasswordFormDataType } from \"@interfaces/Common\";\nimport { authService } from \"@services/index\";\n\nimport AuthFormContainer from \"../Components/AuthFormContainer\";\nimport { resetPasswordFormSchema } from \"../Schemas/ResetPassowordFormSchema\";\nimport ResetPasswordFormFooter from \"./Components/ResetPasswordFormFooter\";\n\nconst ResetPassword = () => {\n  const { t } = useTranslation();\n\n  const toast = useToast();\n\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [generalError, setGeneralError] = useState<AuthFormGeneralError | null>(null);\n  const navigate = useNavigate();\n\n  const { control, handleSubmit: useFormSubmit } = useForm<AuthResetPasswordFormDataType>({\n    resolver: yupResolver(resetPasswordFormSchema(t)),\n  });\n\n  const { search } = useLocation();\n  const lastPath = useMemo(() => search.split(\"?email=\").pop(), [search]);\n\n  const handleSubmit = useFormSubmit(async (formData) => {\n    setIsSubmitting(true);\n\n    try {\n      await authService.resetPassword(String(lastPath), formData);\n      setGeneralError(null);\n      navigate(`${AUTH_PATH.LOGIN}?code=${AUTH_CODE.RESET_PASSWORD}`);\n      toast.success(t(\"resetPasswordSuccessfully\"));\n    } catch (error) {\n      if (error instanceof AxiosError) {\n        setGeneralError({\n          code: AUTH_CODE.OTP_INCORRECT,\n          message: t(\"otpIncorrect\"),\n        });\n      }\n    } finally {\n      setIsSubmitting(false);\n    }\n  });\n\n  useDocumentTitle(t(\"resetPassword\"));\n\n  return (\n    <AuthFormContainer\n      title={t(\"resetYourPassword\")}\n      subtitle={t(\"resetPasswordSubtitle\")}\n      footer={<ResetPasswordFormFooter />}\n    >\n      <form className=\"grid grid-cols-1 gap-6\" onSubmit={handleSubmit}>\n        {generalError ? (\n          <Alert\n            title={t(\"resetPasswordError\")}\n            message={generalError.message}\n            type=\"danger\"\n            className=\"mb-2\"\n          >\n            <Link to={AUTH_PATH.FORGET_PASSWORD}>{t(\"requestNewLink\")}</Link>\n          </Alert>\n        ) : (\n          <Alert\n            title={t(\"resetPasswordLinkSent\")}\n            message={t(\"resetPasswordMessage\", { email: lastPath })}\n            type=\"success\"\n            className=\"mb-2\"\n          />\n        )}\n\n        <InputOTP\n          name=\"otp\"\n          className=\"block w-full\"\n          disabled={isSubmitting}\n          control={control}\n          quantity={6}\n        />\n\n        <Input\n          type=\"password\"\n          label={t(\"password\")}\n          name=\"password\"\n          className=\"block\"\n          disabled={isSubmitting}\n          control={control}\n        />\n        <Input\n          type=\"password\"\n          label={t(\"passwordConfirmation\")}\n          name=\"passwordConfirmation\"\n          className=\"block\"\n          disabled={isSubmitting}\n          control={control}\n        />\n\n        <Button type=\"submit\" disabled={isSubmitting} isLoading={isSubmitting}>\n          {t(\"resetPassword\")}\n        </Button>\n      </form>\n    </AuthFormContainer>\n  );\n};\n\nexport default memo(ResetPassword);\n","import { memo } from \"react\";\nimport { Route, Routes } from \"react-router-dom\";\n\nimport ForgetPassword from \"../ForgetPassword/ForgetPassword\";\nimport Login from \"../Login/Login\";\nimport Register from \"../Register/Register\";\nimport ResetPassword from \"../ResetPassword/ResetPassword\";\n\nconst AuthRoutes = () => {\n  return (\n    <Routes>\n      <Route path=\"login\" element={<Login />} />\n      <Route path=\"register\" element={<Register />} />\n      <Route path=\"forget-password\" element={<ForgetPassword />} />\n      <Route path=\"reset-password\" element={<ResetPassword />} />\n    </Routes>\n  );\n};\n\nexport default memo(AuthRoutes);\n"],"names":["AuthFormContainer","_ref","title","subtitle","children","footer","_jsx","className","_jsxs","memo","forgetPasswordFormSchema","t","_t","_t2","object","shape","email","string","required","ForgetPasswordFormFooter","useTranslation","Link","to","AUTH_PATH","LOGIN","FiChevronLeft","ForgetPassword","navigate","useNavigate","isSubmitting","setIsSubmitting","useState","generalError","setGeneralError","control","handleSubmit","useFormSubmit","useForm","resolver","yupResolver","async","authService","formData","concat","RESET_PASSWORD","error","AxiosError","code","AUTH_CODE","ACCOUNT_NOT_EXISTS","message","useDocumentTitle","onSubmit","Alert","type","Input","label","name","disabled","Button","isLoading","loginFormSchema","_t3","password","LoginFormFooter","_searchParams$get","searchParams","useSearchParams","_Fragment","REGISTER","encodeURIComponent","get","Login","appNameConfigValue","useSelector","commonSelector","watch","methods","userData","setAuthToken","token","isEmpty","appName","FormProvider","FORGET_PASSWORD","role","tabIndex","registerFormSchema","_t4","_t5","generateFormSchema","username","RegisterFormFooter","Register","setValue","then","catch","err","status","response","data","UNPROCESSABLE_ENTITY","ACCOUNT_EXISTS","finally","useEffect","emailParams","htmlFor","Checkbox","Trans","i18nKey","resetPasswordFormSchema","password_confirmation","oneOf","ref","otp","ResetPasswordFormFooter","ResetPassword","toast","useToast","search","useLocation","lastPath","useMemo","split","pop","String","success","OTP_INCORRECT","InputOTP","quantity","AuthRoutes","Routes","Route","path","element"],"sourceRoot":""}